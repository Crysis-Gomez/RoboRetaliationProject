<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="410"
		  height="400"
		  creationComplete="init(event)"
		  gap="10">
	<fx:Script>
		<![CDATA[
			import core.Game;
			import flash.events.Event;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			import maps.elements.checkpoint.CheckPoint;
			import maps.elements.conveyorbelt.ConveyorBelt;
			import maps.elements.conveyorbelt.ConveyorBeltCorner;
			import maps.elements.conveyorbelt2x.ConveyorBelt2x;
			import maps.elements.gear.RotateGear;
			import maps.elements.pit.Pit;
			import maps.elements.repair.RepairElement;
			import maps.Map;
			import maps.elements.base.BoardElement;
			import maps.elements.start.StartElement;
			import maps.factories.BoardElementFactory;
			import maps.Node;
			import maps.tools.properties.base.CheckPointProperties;
			import maps.tools.properties.ConveyorBelt2xProperties;
			import maps.tools.properties.ConveyorBeltCornersProperties;
			import maps.tools.properties.ConveyorBeltProperties;
			import maps.tools.properties.NodeProperties;
			import maps.tools.properties.PitProperties;
			import maps.tools.properties.RepairElementProperties;
			import maps.tools.properties.RotateGearProperties;
			import maps.tools.properties.StartElementProperties;
			import maps.tools.properties.base.PropertiesElement;
			import models.data.MapData;
			import mx.events.DropdownEvent;
			
			import models.data.BoardElementData;
			
			import mx.events.FlexEvent;
			
			import screens.MapSelectionScreen;
			
			import utils.SpriteContainer;
			
			public static var selectedItem:BoardElement;
			private var propertiesElement:PropertiesElement;
			static private var instance:MapEditingTools;
			private var container:MapSelectionScreen;
			private var map:Map;
			public static var mayPutWalls:Boolean = false;
			public static var mayPutLasers:Boolean = false;
			public static var mayErase:Boolean = false;
			private var selectedMap:String;
			
			public static function getInstance():MapEditingTools
			{
				return instance;
			}
			
			protected function init(event:FlexEvent):void
			{
				loadBoardElements();
				instance = this;
			}
			
			private function loadBoardElements():void
			{
				
				var factory:BoardElementFactory = BoardElementFactory.getInstance();
				for each (var aBoardElemetData:BoardElementData in GameData.boardelements)
				{
					elementContainer.addElement(new SpriteContainer(factory.getBoardElement(aBoardElemetData.type, false, true)));
				}
				loadNames();
			}
			
			public function removeProperties():void
			{
				if (numElements == 2)
				{
					removeElementAt(numElements - 1);
				}
			}
			
			public function showNodeProperties(node:Node):void
			{
				removeProperties();
				var nodeProp:NodeProperties = new NodeProperties();
				addElement(nodeProp);
				nodeProp.setData(node);
			}
			
			public function showProperties(boardElement:BoardElement):void
			{
				switch (boardElement.type)
				{
					case "startElement": 
						var propertiesElement:StartElementProperties = new StartElementProperties();
						
						addElement(propertiesElement);
						propertiesElement.setData(boardElement as StartElement);
						break;
					
					case "conveyorBelt": 
						var conveyorPropertiesElement:ConveyorBeltProperties = new ConveyorBeltProperties();
						
						addElement(conveyorPropertiesElement);
						conveyorPropertiesElement.setData(boardElement as ConveyorBelt);
						
						break;
					case "conveyorBelt2x": 
						var conveyor2xPropertiesElement:ConveyorBelt2xProperties = new ConveyorBelt2xProperties();
						
						addElement(conveyor2xPropertiesElement);
						conveyor2xPropertiesElement.setData(boardElement as ConveyorBelt2x);
						
						break;
					
					case "conveyorBeltCorner": 
						var conveyorCornerPropertiesElement:ConveyorBeltCornersProperties = new ConveyorBeltCornersProperties();
						
						addElement(conveyorCornerPropertiesElement);
						conveyorCornerPropertiesElement.setData(boardElement as ConveyorBeltCorner);
						
						break;
					
					case "rotateGear": 
						var rotatePropertiesElement:RotateGearProperties = new RotateGearProperties()
						
						addElement(rotatePropertiesElement);
						rotatePropertiesElement.setData(boardElement as RotateGear);
						
						break;
					
					case "repairElement": 
						var repairElementProperties:RepairElementProperties = new RepairElementProperties();
						addElement(repairElementProperties);
						repairElementProperties.setData(boardElement as RepairElement);
						
						break;
					
					case "pit": 
						var pitProperties:PitProperties = new PitProperties();
						addElement(pitProperties);
						pitProperties.setData(boardElement as Pit);
						
						break;
					
					case "checkPoint": 
						var checkProperties:CheckPointProperties = new CheckPointProperties();
						addElement(checkProperties);
						checkProperties.setData(boardElement as CheckPoint);
						break;
					default: 
						trace("BoardElement has no properties");
						break;
				}
			}
			
			protected function save(event:MouseEvent):void
			{
				var appDirFile:File = new File("app:/levels/" + mapName.text + ".xml");
				
				var mapString:String = "";
				mapString += "<data>"
				mapString += "<name>" + mapName.text + "</name>";
				mapString += map.toXML();
				mapString += "</data>";
				
				var mapXML:XML = XML(mapString);
				
				var mapFile:File = new File(appDirFile.nativePath);
				var mapStream:FileStream = new FileStream();
				mapStream.open(mapFile, FileMode.WRITE);
				mapStream.writeUTFBytes(mapXML);
				mapStream.close();
			}
			
			protected function load(event:MouseEvent):void
			{
				
				if (selectedMap != " ")
				{
					MapSelectionScreen.getScreen().loadMap(selectedMap, "editingMap");
					
				}
			
			}
			
			public function setMap(map:Map):void
			{
				this.map = map;
			
			}
			
			public function loadNames():void
			{
				for (var i:int = 0; i < GameData.maps.length; i++)
				{
					var map:MapData = GameData.maps[i];
					array.addItem(map.name);
					
				}
			}
			
			public function dropEvt(event:Event):void
			{
				selectedMap = "" + event.currentTarget.selectedItem;
			}
			
			public function setBooleans():void
			{
				mayPutLasers = laser.selected;
				if (laser.selected)
				{
					wall.selected = false;
				}
				
				mayPutWalls = wall.selected;
				removeProperties();
				
				mayErase = eraser.selected;
			
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="200"
					   height="100%"
					   cornerRadius="20">
		<s:Scroller bottom="10"
					width="180"
					height="200"
					horizontalCenter="0">

			<s:TileGroup width="100%"
						 height="100%"
						 id="elementContainer">
			</s:TileGroup>

		</s:Scroller>
		<s:ToggleButton id="wall"
						x="10"
						y="130"
						label="Walls"
						click="setBooleans()" />
		<s:ToggleButton id="laser"
						x="118"
						y="130"
						label="Lasers"
						click="setBooleans()" />
		<s:ToggleButton id="eraser"
						x="118"
						y="100"
						label="Eraser"
						click="setBooleans()" />
		<s:DropDownList id="drop"
						width="100"
						y="100"
						close="dropEvt(event)">
			<mx:ArrayList id="array">

			</mx:ArrayList>

		</s:DropDownList>
		<s:Button x="10"
				  y="159"
				  label="Save"
				  click="save(event)" />
		<s:Button x="118"
				  y="159"
				  label="Load"
				  click="load(event)" />
		<s:Label top="10"
				 width="180"
				 height="25"
				 horizontalCenter="0"
				 text="MapName"
				 verticalAlign="middle" />
		<s:TextInput id="mapName"
					 top="40"
					 width="180"
					 height="25"
					 horizontalCenter="0" />
	</s:BorderContainer>
</s:HGroup>
