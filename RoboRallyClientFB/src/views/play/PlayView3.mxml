<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:elements="elements.*"
		actionBarVisible="false"
		tabBarVisible="false"
		title="PlayView"
		creationComplete="init()"
		keyDown="onKeyDown(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DropShadowFilter id="dropShaText"
							distance="1"
							angle="45"
							blurX="2"
							blurY="2"
							alpha="1"
							color="0xFFFFFF" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import connection.ConnectionEvent;
			import connection.SocketConnection;
			import elements.Card;
			import elements.CardRegister;
			import flash.display.Bitmap;
			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import flash.events.TimerEvent;
			import flash.events.TransformGestureEvent;
			import flash.ui.Keyboard;
			import flash.ui.KeyLocation;
			import flash.utils.Timer;
			import models.connection.PickUpAccept;
			import models.connection.PickUpDeclined;
			import models.connection.PickUpRequest;
			import models.connection.Reboot;
			import notifications.NotificationManager;
			import notifications.NotificationOption;
			import skins.RebootButton;
			import views.RoboRallyClientHomeView;
			import models.connection.ReceivedCards;
			import models.data.CardData;
			import models.data.PlayerData;
			import models.data.RobotData;
			
			private var playerData:PlayerData;
			public var selectedCard:Card;
			private var count:int;
			private var destroyed:Boolean;
			private var cardRegisters:Array;
			private var mayReboot:Boolean = false;
			private var rebootNextPhase:Boolean = false;
			private var rebooting:Boolean = false;
			private var timerTime:int;
			private var countDownTimer:Timer;
			private var goingDown:Boolean = false;
			private var cardIndex:int = 9;
			private var mayGlow:Boolean = true;
			private var stop:Boolean = false;
			
			private function onKeyDown(event:KeyboardEvent):void
			{
			
			}
			
			private function init():void
			{
				cardRegisters = new Array();
				
				if (AppData.getInstance().gameOptions.timer > 0)
				{
					timerTime = AppData.getInstance().gameOptions.timer;
				}
				
				for (var i:int = 0; i < hand.numElements; ++i)
				{
					cardRegisters.push(hand.getElementAt(i));
				}
				
				playerData = data[0] as PlayerData;
				displayCards(data[1] as Array);
				robotImage.source = (GameData.robots[playerData.robotID] as RobotData).image;
				playerName.text = playerData.name.toString();
				
				backgroundColor.color = GlobalConstants.COLORS[playerData.id - 1];
				
				mayReboot = true;
				textLabel.visible = false;
				textLabel2.visible = false;
				
				SocketConnection.getInstance().connectionHandler.addEventListener(ConnectionEvent.RECEIVED_CARDS, onCardsReceived);
				SocketConnection.getInstance().connectionHandler.addEventListener(ConnectionEvent.PLAYER_DIED, onPlayerDied);
				SocketConnection.getInstance().connectionHandler.addEventListener(ConnectionEvent.CONNECT_CLOSE, onClose);
				SocketConnection.getInstance().connectionHandler.addEventListener(ConnectionEvent.PLAYER_SYNC, onPlayerSync);
				SocketConnection.getInstance().connectionHandler.addEventListener(ConnectionEvent.PICKUP_REQUEST, onPickupRequest);
				sheet.y -= this.height;
				
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);
				this.addEventListener(Event.ENTER_FRAME, update);
				
				if (GlobalConstants.TUTORIAL_PLAY)
				{
					
					cardIndex = 5;
					for (var j:int = cardIndex; j < 9; j++)
					{
						var cardReg:CardRegister = hand.getElementAt(j) as elements.CardRegister;
						cardReg.visible = false;
						
					}
					addEventListener(Event.ENTER_FRAME, checkEnter);
					mayReboot = false;
					
					
					NotificationManager.getInstance().notify("Slide up or down to show or remove the cheatsheet",new Array(new NotificationOption("Oke", null)), 0);
				}
			
			}
			
			private function checkEnter(e:Event):void 
			{
				var count:int = 0;
				for (var i:int = 0; i < 5; i++) 
				{
					var cardReg:CardRegister = registers.getElementAt(i) as CardRegister;
					if (cardReg.card != null) {
						count++;
					}
				}
				
				if (count == 5) {
					(lockRegisterButton.skin as  skins.LockRegisterButton).glowing();
					removeEventListener(Event.ENTER_FRAME, checkEnter);
				}
			}
			
			public function glowCard():void 
			{
				for (var i:int = 0; i < 5; i++)
				{
					var cardReg:CardRegister = hand.getElementAt(i) as CardRegister;
					cardReg.card.glowClick();
					
				}
				
				mayGlow = false;
			}
			
			public function glowRegister():void
			{
				
				for (var k:int = 0; k < 5; k++)
				{
					var Reg:CardRegister = registers.getElementAt(k) as CardRegister;
					Reg.glowClick();
				}
				
			}
			
			private function update(e:Event):void
			{
				if (goingDown)
				{
					moveDown();
				}
				else
				{
					moveUp();
				}
			}
			
			private function onSwipe(e:TransformGestureEvent):void
			{
				if (e.offsetY == 1)
				{
					goingDown = true;
				}
				
				if (e.offsetY == -1)
				{
					goingDown = false;
				}
			
			}
			
			private function moveDown():void
			{
				if (sheet.y < 0)
				{
					sheet.y += height / 4;
				}
				
				if (sheet.y > 0)
					sheet.y = 0;
			}
			
			private function moveUp():void
			{
				if (sheet.y > -height)
				{
					sheet.y -= height / 4;
				}
				
				if (sheet.y < -height)
					sheet.y = -height;
			}
			
			private function onPickupRequest(e:ConnectionEvent):void
			{
				NotificationManager.getInstance().notify("Do you want to activate your item", new Array(new NotificationOption("Yes", pickUpAccept, e.data), new NotificationOption("No", pickUpDeclined, e.data)));
			}
			
			private function pickUpDeclined(pickUp:PickUpRequest):void
			{
				var data:PickUpDeclined = new PickUpDeclined();
				data.pickuptype = pickUp.pickuptype;
				data.uid = pickUp.uid;
				SocketConnection.getInstance().sendData(data);
			}
			
			private function pickUpAccept(pickUp:PickUpRequest):void
			{
				var data:PickUpAccept = new PickUpAccept();
				data.pickuptype = pickUp.pickuptype;
				data.uid = pickUp.uid;
				data.arg = pickUp.arg;
				SocketConnection.getInstance().sendData(data);
			}
			
			private function onPlayerSync(e:ConnectionEvent):void
			{
				playerData = e.data as PlayerData;
				doRegisters();
				
				switch (playerData.stageCount)
				{
					case 1: 
						Tutorial.text = "Use rotating cards to change the robots direction.";
						mayReboot = false;
						break;
					
					case 2: 
						Tutorial.text = "Factory objects can help you reaching your destination."
						mayReboot = false;
						break;
					
					case 3: 
						Tutorial.text = "Lasers and robots facing other robots do damage."
						mayReboot = false;
						break;
					
					case 4: 
						Tutorial.text = "Use ‘Reboot’ to reset all your damage points."
						mayReboot = true;
						break;
						
					case 5: 
						Tutorial.text = "Go for the last checkpoint!!";
						mayReboot = false;
				
						break;
					
					default: 
				}
			}
			
			private function onClose(e:ConnectionEvent):void
			{
				var timer:Timer = new Timer(250);
				timer.addEventListener(TimerEvent.TIMER, function():void
					{
						if (navigator != null)
						{
							navigator.popView();
							navigator.pushView(RoboRallyClientHomeView);
						}
					});
				
				timer.start();
			}
			
			private function onPlayerDied(e:ConnectionEvent):void
			{
				playerData.lives--;
				destroyed = true;
				robotDied.visible = true;
				mayReboot = true;
			}
			
			private function doRegisters():void
			{
				switch (playerData.damage)
				{
					case 0: 
					case 1: 
					case 2: 
					case 3: 
					case 4: 
						unlockRegister(1);
						unlockRegister(2);
						unlockRegister(3);
						unlockRegister(4);
						unlockRegister(5);
						break;
					case 5: 
						lockRegister(5);
						unlockRegister(4);
						unlockRegister(1);
						unlockRegister(2);
						unlockRegister(3);
						break;
					case 6: 
						lockRegister(5);
						lockRegister(4);
						unlockRegister(3);
						unlockRegister(1);
						unlockRegister(2);
						break;
					case 7: 
						lockRegister(5);
						lockRegister(4);
						lockRegister(3);
						unlockRegister(2);
						unlockRegister(1);
						break;
					case 8: 
						lockRegister(5);
						lockRegister(4);
						lockRegister(3);
						lockRegister(2);
						unlockRegister(1);
						break;
					case 9: 
						lockRegister(5);
						lockRegister(4);
						lockRegister(3);
						lockRegister(2);
						lockRegister(1);
						break;
					case 10: 
						lockRegister(5);
						lockRegister(4);
						lockRegister(3);
						lockRegister(2);
						lockRegister(1);
						break;
				}
			}
			
			private function lockRegister(number:Number):void
			{
				(registers.getElementAt(number - 1) as CardRegister).locked = true;
			}
			
			private function unlockRegister(number:Number):void
			{
				(registers.getElementAt(number - 1) as CardRegister).locked = false;
			}
			
			private function displayCards(cards:Array):void
			{
				for (var i:int = 0; i < cards.length; ++i)
				{
					var cardData:CardData = cards[i];
					var cardElement:CardRegister = hand.getElementAt(i) as CardRegister;
					cardElement.addCard(cardData);
				}
				
				if (timerTime > 0)
				{
					countDownTimer = new Timer(25, timerTime * 40);
					countDownTimer.addEventListener(TimerEvent.TIMER, onTimer);
					countDownTimer.start();
				}
				
				if (mayGlow)
				{
					glowCard();
				
				}
			
			}
			
			private function onTimer(e:TimerEvent):void
			{
				if ((e.target as Timer).currentCount == (e.target as Timer).repeatCount)
				{
					randomizeCards();
					onRegisterLock();
				}
				
				var progress:Number = ((e.target as Timer).currentCount / (e.target as Timer).repeatCount) * 100;
				var percentedHeight:Number = 100 - progress;
				
				timer.percentHeight = percentedHeight;
			}
			
			private function randomizeCards():void
			{
				for (var i:int; i < registers.numElements - 1; ++i)
				{
					var cardRegister:CardRegister = registers.getElementAt(i) as CardRegister;
					if (cardRegister.card == null)
					{
						placeCardOnRegister(cardRegister);
					}
				}
			}
			
			private function placeCardOnRegister(cardRegister:CardRegister):void
			{
				getCardFromHand();
				cardRegister.placeCard(selectedCard);
				
				
			
			}
			
			private function getCardFromHand():void
			{
				var cardRegisterInHand:CardRegister = hand.getElementAt(Math.floor(Math.random() * 9)) as CardRegister;
				
				if (cardRegisterInHand.card != null)
				{
					selectedCard = cardRegisterInHand.card;
				}
				else
				{
					getCardFromHand();
				}
			}
			
			public function resetCards(cards:Array):void
			{
				
				for (var i:int = 0; i < 5; ++i)
				{
					var cardElement:CardRegister = registers.getElementAt(i) as CardRegister;
					cardElement.removeCard();
				}
				
				for (var j:int = 0; j < cardIndex; ++j)
				{
					var cardElement2:CardRegister = hand.getElementAt(j) as CardRegister;
					cardElement2.removeCard();
				}
				
				selectedCard = null;
				
				if (!rebooting)
				{
					displayCards(cards);
					lockRegisterButton.enabled = true;
					doRegisters();
					//if (!GlobalConstants.TUTORIAL_PLAY)
					//{
					changeBackround();
						//}
					
				}
				else if (rebooting)
				{
					playerData.damage = 0;
					rebooting = false;
					doRegisters();
					for (var k:int = 0; k < cardIndex; k++)
					{
						var register:CardRegister = hand.getElementAt(k) as elements.CardRegister;
						register.addDmgBackground(false);
					}
					
				}
			
			}
			
			public function checkSelectedCard():void
			{
				for (var i:int = 0; i < hand.numElements; i++)
				{
					var card:Card = hand[i];
					
				}
			}
			
			public function sortToFront(cardRegister:CardRegister):void
			{
				var topcard:int = cardIndex;
				if (!stop && !mayGlow) {
					for (var z:int = 0; z < 5; z++)
					{
						var Reg:CardRegister = registers.getElementAt(z) as CardRegister;
						Reg.glowClick();
					}
					
					stop = true;
				}
				
				
				for (var i:int = 0; i < cardIndex; ++i)
				{
					if (cardRegisters[i] == cardRegister)
					{
						hand.setElementIndex(cardRegisters[i], --topcard);
						if (i != 0)
						{
							var j:int = i - 1;
							for (j; j > 0; j--)
							{
								hand.setElementIndex(cardRegisters[j], --topcard);
							}
						}
						if (i != cardIndex - 1)
						{
							var k:int = i + 1;
							for (k; k < cardIndex; ++k)
							{
								hand.setElementIndex(cardRegisters[k], --topcard);
							}
						}
						
						return;
					}
					
				}
			
			}
			
			private function onRegisterLock():void
			{
				
				if (playerData.stageCount == 4 && GlobalConstants.TUTORIAL_PLAY)
				{
					if (!rebootNextPhase)
						return;
				}
				
				if (countDownTimer != null)
				{
					countDownTimer.stop();
				}
				mayReboot = false;
				selectedCard = null;
				var playedCards:Array = new Array();
				for (var i:int = 0; i < registers.numElements - 1; ++i)
				{
					if ((registers.getElementAt(i) as CardRegister).card == null)
					{
						//TODO: Nice gracefull message the card didn't play five cards in total some kind of popup notification system
						return;
					}
					else
					{
						playedCards.push((registers.getElementAt(i) as CardRegister).card.data);
					}
					
					if (playedCards.length == 5)
					{
						
						lockRegisterButton.enabled = false;
						(lockRegisterButton.skin as  skins.LockRegisterButton).glow.alpha = 0;
						var receivedCardsPlayer:ReceivedCards = new ReceivedCards();
						receivedCardsPlayer.cards = playedCards;
						SocketConnection.getInstance().sendData(receivedCardsPlayer);
					}
					else
					{
						//TODO: Nice gracefull message the card didn't play five cards in total some kind of popup notification system
					}
				}
			
				
				
			}
			
			private function onCardsReceived(e:ConnectionEvent):void
			{
				if (destroyed)
				{
					restore();
				}
				
				checkRebooting();
				resetCards(e.data as Array);
			}
			
			public function reboot(e:MouseEvent):void
			{
				if (!mayReboot)
				{
					NotificationManager.getInstance().notify("Can`t reboot at the moment", new Array(new NotificationOption("Oke", null)), 0);
				}
				
				else
				{
					NotificationManager.getInstance().notify("Do you really want to reboot", new Array(new NotificationOption("Yes", sendReboot), new NotificationOption("No", null)), 0);
					
				}
			
			}
			
			public function displayRebootText():void
			{
				rebootNextPhase = true;
				textLabel2.visible = true;
				textBG.visible = true;
			
			}
			
			private function sendReboot():void
			{
				
				var rebootPlayer:Reboot = new Reboot();
				rebootPlayer.playerID = this.playerData.id;
				SocketConnection.getInstance().sendData(rebootPlayer);
				//timer.stop();
				displayRebootText();
				powerOffButton.enabled = false;
			
			}
			
			private function checkRebooting():void
			{
				textLabel.visible = false;
				textLabel2.visible = false;
				textBG.visible = false;
				rebooting = false;
				if(playerData.stageCount <= 0) mayReboot = true;
				if (rebootNextPhase)
				{
					rebooting = true;
					textLabel.visible = true;
					textBG.visible = true;
					rebootNextPhase = false;
					powerOffButton.enabled = true;
				}
			}
			
			private function restore():void
			{
				robotDied.visible = false;
				
				destroyed = false;
				unlockRegister(5);
				unlockRegister(4);
				unlockRegister(3);
				unlockRegister(2);
				unlockRegister(1);
				playerData.damage = 2;
			
			}
			
			public function changeBackround():void
			{
				for (var i:int = 0; i < cardIndex; i++)
				{
					var register:CardRegister = hand.getElementAt(i) as elements.CardRegister;
					if (register.card != null)
					{
						register.addDmgBackground(false);
					}
					else
					{
						register.addDmgBackground(true);
					}
				}
			
			}
		]]>
	</fx:Script>
	<!--BACKGROUND-->
	<s:Rect width="100%"
			height="100%">
		<s:fill>
			<s:BitmapFill source="@Embed(source='../assets/bg.jpg')">
			</s:BitmapFill>
		</s:fill>
	</s:Rect>





	<s:Group left="50"
			 right="10"
			 bottom="10"
			 height="63%">
		<s:Rect width="100%"
				height="100%">
			<s:fill>
				<s:SolidColor color="0xC0C0C0">

				</s:SolidColor>
			</s:fill>
		</s:Rect>
		<s:VGroup left="10"
				  right="10"
				  top="10"
				  gap="10"
				  bottom="10">
			<s:Group width="100%"
					 height="50%">
				<s:Rect width="100%"
						height="100%">
					<s:fill>
						<s:SolidColor color="0x808080">
						</s:SolidColor>
					</s:fill>
				</s:Rect>
				<s:HGroup width="100%"
						  height="100%"
						  gap="5"
						  horizontalCenter="0"
						  paddingBottom="10"
						  paddingTop="10"
						  id="registers"
						  horizontalAlign="center">

					<elements:CardRegister id="one" />
					<elements:CardRegister id="two" />
					<elements:CardRegister id="three" />
					<elements:CardRegister id="four" />
					<elements:CardRegister id="five" />
					<s:Button height="100%"
							  skinClass="skins.LockRegisterButton"
							  id="lockRegisterButton"
							  click="onRegisterLock()">
					</s:Button>

				</s:HGroup>
			</s:Group>
			<s:Group width="100%"
					 height="50%">
				<s:Rect width="100%"
						height="100%">
					<s:fill>
						<s:SolidColor color="0x808080">
						</s:SolidColor>
					</s:fill>
				</s:Rect>

				<s:Group id="hand"
						 right="30"
						 width="100%"
						 clipAndEnableScrolling="true"
						 height="100%">
					<elements:CardRegister left="0" />
					<elements:CardRegister left="{hand.height + Math.round((hand.width-(hand.height*9))/8)}" />
					<elements:CardRegister left="{hand.height*2 + Math.round((hand.width-(hand.height*9))/8)*2}" />
					<elements:CardRegister left="{hand.height*3 + Math.round((hand.width-(hand.height*9))/8)*3}" />
					<elements:CardRegister left="{hand.height*4 + Math.round((hand.width-(hand.height*9))/8)*4}" />
					<elements:CardRegister left="{hand.height*5 + Math.round((hand.width-(hand.height*9))/8)*5}" />
					<elements:CardRegister left="{hand.height*6 + Math.round((hand.width-(hand.height*9))/8)*6}" />
					<elements:CardRegister left="{hand.height*7 + Math.round((hand.width-(hand.height*9))/8)*7}" />
					<elements:CardRegister left="{hand.height*8 + Math.round((hand.width-(hand.height*9))/8)*8}" />


				</s:Group>

			</s:Group>
		</s:VGroup>
	</s:Group>
	<s:Group left="50"
			 right="10"
			 top="10"
			 height="32%">


		<s:Group left="0"
				 top="0"
				 width="{20+imageContainer.width}"
				 height="100%">
			<s:Rect width="100%"
					height="100%">
				<s:fill>
					<s:SolidColor color="0xC0C0C0">

					</s:SolidColor>
				</s:fill>
			</s:Rect>
			<s:BorderContainer id="imageContainer"
							   left="10"
							   top="10"
							   bottom="10"
							   width="{imageContainer.height}"
							   cornerRadius="20"
							   dropShadowVisible="false">
				<s:backgroundFill>
					<s:SolidColor id="backgroundColor"
								  alpha="100" />
				</s:backgroundFill>
				<s:BorderContainer left="10"
								   right="10"
								   top="10"
								   bottom="10"
								   borderWeight="0"
								   cornerRadius="10"
								   backgroundImage="@Embed(source='assets/iconbg.png')">

					<s:Image id="robotImage"
							 left="5"
							 right="5"
							 top="5"
							 bottom="5" />
					<s:Image id="robotDied"
							 visible="false"
							 source="@Embed(source='assets/dead.png')"
							 width="100%"
							 height="100%">
					</s:Image>
				</s:BorderContainer>
			</s:BorderContainer>


		</s:Group>
		<s:Group right="0"
				 width="{powerOffButton.width+40}"
				 height="100%">
			<s:Rect width="100%"
					height="100%">
				<s:fill>
					<s:SolidColor color="0xC0C0C0">

					</s:SolidColor>
				</s:fill>
			</s:Rect>
			<s:Button id="powerOffButton"
					  click="reboot(event)"
					  right="20"
					  top="20"
					  skinClass="skins.RebootButton"
					  bottom="20"
					  width="{powerOffButton.height}"
					  label="Button" />

		</s:Group>
		<s:Rect id="textBG"
				bottom="0"
				width="50%"
				height="36"
				visible="false"
				horizontalCenter="0">
			<s:fill>
				<s:SolidColor color="0xC0C0C0">

				</s:SolidColor>
			</s:fill>
		</s:Rect>
		<s:Label id="textLabel2"
				 bottom="0"
				 width="100%"
				 height="30"
				 color="0xFF0000"
				 filters="{[dropShaText]}"
				 horizontalCenter="0"
				 scaleX="1"
				 scaleY="1"
				 text="Will reboot next round."
				 textAlign="center"
				 verticalAlign="middle"
				 fontSize="30"
				 fontFamily="Nasalization">
		</s:Label>

		<s:Label id="Tutorial"
				 bottom="40"
				 width="100%"
				 height="20"
				 color="0xFFFF00"
				 filters="{[dropShaText]}"
				 horizontalCenter="0"
				 scaleX="1"
				 scaleY="1"
				 text="Use the movement cards to move your robot."
				 textAlign="center"
				 verticalAlign="middle"
				 fontSize="25"
				 fontFamily="Nasalization">
		</s:Label>

		<s:Label id="textLabel"
				 bottom="0"
				 width="100%"
				 height="30"
				 color="0xFF0000"
				 filters="{[dropShaText]}"
				 horizontalCenter="0"
				 scaleX="1"
				 scaleY="1"
				 text="Rebooting..."
				 textAlign="center"
				 verticalAlign="middle"
				 fontSize="30"
				 fontFamily="Nasalization">
		</s:Label>
		<s:Label id="playerName"
				 top="10"
				 width="200"
				 height="36"
				 color="#FFFFFF"
				 fontSize="36"
				 horizontalCenter="0"
				 text="Player 1"
				 textAlign="center"
				 verticalAlign="middle"
				 filters="{[dropShaText]}"
				 fontFamily="Nasalization" />
	</s:Group>
	<s:Group left="10"
			 top="10"
			 bottom="10"
			 width="30">
		<s:Rect x="0"
				y="0"
				width="100%"
				height="100%">
			<s:fill>
				<s:SolidColor color="0xC0C0C0">

				</s:SolidColor>
			</s:fill>
		</s:Rect>
		<s:Rect id="timer"
				x="0"
				y="0"
				bottom="0"
				width="100%"
				percentHeight="100">
			<s:fill>
				<s:SolidColor color="0xFF0000">

				</s:SolidColor>
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:Rect width="100%"
			id="sheet"
			height="100%">
		<s:fill>
			<s:BitmapFill source="@Embed(source='../assets/cheatSheet.png')">
			</s:BitmapFill>
		</s:fill>
	</s:Rect>

</s:View>
